package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	graphModel "github.com/22Fariz22/forum/graph/model"
	commonModel "github.com/22Fariz22/forum/internal/model"
	"github.com/google/uuid"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, allowComments bool, author string) (*graphModel.Post, error) {
	// Создаем объект User для автора поста
	fmt.Println("CREATEPOST in schema")
	user := &commonModel.User{
		ID:       uuid.New().String(),
		Username: author,
	}

	newPost := &commonModel.Post{
		ID:            uuid.New().String(),
		Title:         title,
		Content:       content,
		AllowComments: allowComments,
		Author:        user,
	}

	err := r.Repo.CreatePost(newPost)
	if err != nil {
		return nil, err
	}

	newPostQLModel := &graphModel.Post{
		ID:            newPost.ID,
		Title:         newPost.Title,
		Content:       newPost.Content,
		AllowComments: newPost.AllowComments,
		Author:        (*graphModel.User)(newPost.Author),
	}

	return newPostQLModel, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID string, parentID *string, content string, author string) (*graphModel.Comment, error) {
		// Проверяем, что пост существует
	post, err := r.Repo.GetPostByID(postID)
	if err != nil {
		return nil, errors.New("пост не найден")
	}

	// Если комментарии запрещены
	if !post.AllowComments {
		return nil, errors.New("комментарии запрещены для этого поста")
	}

	// Ограничиваем длину текста комментария (например, до 2000 символов)
	if len(content) > 2000 {
		return nil, errors.New("длина комментария превышает лимит")
	}

	// Создаем объект User для автора комментария
	user := &commonModel.User{
		ID:       uuid.New().String(),
		Username: author,
	}

	newComment := &commonModel.Comment{
		ID:       uuid.New().String(),
		PostID:   postID,
		ParentID: parentID,
		Content:  content,
		Author:   user,
	}

	err = r.Repo.CreateComment(newComment)
	if err != nil {
		return nil, err

}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*graphModel.Post, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*graphModel.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *graphModel.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
